< 2024-09-03 강의 내용 React 시작 >

React 의미 파악하기!
   React는 왜 만들어졌을까?
     1. Facebook // Meta 
      비효율 개선
     2. JS : 웹 브라우저에서만 읽을 수 있는 프로그래밍 언어
       웹브라우저가 아닌 곳에서도 읽을 수 있게
     3. Node 기반으로 이루어짐 
     4. 구글 웹 브라우저 = > 크롬
       V8 검색엔진 // 자바스크립트
     5. JS를 웹브라우저가 아닌 곳에서도 사용할 수 있는 실행 환경 만들어 보자!
     => Node 탄생!
     6. Node 위에서 작업되는 모든 작업물 > 프로젝트
        Node Project(=package) Manager

        * react 설치 방법 : 반드시 노드 설치되어있어야 함
     7. npm run start //  npm i (인스톨 설치)
     8. npx 설치 즉시 업데이트 실행될 수 있는 기능 탑재 npx create-react-app .
     npx create-react-app my-app 이거로 설치하니까 됨
       참고한 사이트 : https://velog.io/@odada/react-app-%EC%84%A4%EC%B9%98-react-%ED%95%84%EC%88%98-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC
    9. nam i ... 
  1. 각각 개별적인 페이지 + 헤더 & 푸터
   > iframe : 불편 // 사이즈 등등
   > 컴포넌트 단위 쪼개서 작업 후 재결합!!
   > 최근 UI/UX 디자인 영역 핫 키워드
   > PM : 헤더 컴포넌트 // 푸터 컴포넌트
   > 조원 : 헤더 컴포넌트 // 메인 페이지 // 헤더 컴포넌트 + 상세 페이지
   // 장바구니
   >  프로젝트 : 파일 1개당 용량 // 디버깅 효율
  2. CSR 방식
   > 기존 : 팀 프로젝트 작업 : SSR 방식 (Server Side Rendering)
   CSR : Client Side Rendering => 서버
   속도가 매우 빠름
  3. 웹 브라우저가 아닌 곳에서 사용!
   > 기업 => 웹 페이지 리뉴얼 & 앱 개발
   React-Native 

리엑트 설치 후 불필요한 파일 제거 !
   React 설치 후 삭제해야 하는 reset 요소
   1. src > App.test
   2. src > logo.svg
   3. src > reportWebVitals
   4. src > setupTest

   > App.js > logo 파일 내용 제거
   > index.js > reportWebVitals 흔적 제거

   node_modules > react > dependencies: 의존하다

React 가 작동되어지는 원리!
  1. 모든 요소들이 Component 기반으로 운영됨
     public > index.html > //<div id="root"></div> 안에 출력되는 것임

  index.js > getElementById DOM 안에서 함수 찾아오는 아이디임
     가상 돔의 창구에서 만들어주세요!
     index.js 에 보면 root.render(<App />);있음 이 의미는  
     root 인자값 App 컴퍼넌트 (app.js)를 말하는 것임
     root 라는 아이디값을 가진 곳에 꽂아 넣어라!

과거에는(2018년 이전) React의 모든 컴포넌트들이 Class 였음.
   컴포넌트로 형성된 함수들은 반드시 대문자로 시작되어야 함!
   컴포넌트 = 함수
   함수가 실행되면 실행된 값을 다른곳에서 사용할 때 return을 사용해야 값을 사용할 수 있음.

React 만의 독특한 특성!
   컴퍼넌트로 다 쪼개기
   function 함수 사용하여 <div>태그를 쓰지 않고도 
   앞에서 정의한 function 의 대문자로 시작하는 <Header />만입력하면
   그 내용이 들어가게 됨.

리엑트의 기술적 특징!!
   1. 컴포넌트 기반으로 UI를 표현함

  Header.js
  MAin.js
  Footer.js
  레고를 조립하듯
  자바스크립트 파일로 모듈화 함

  html로 마크업 : 중복코드 발생
  - 페이지의 수가 늘어날 수록 코드를 수정하거나 유지보수가 어려워짐
  헤더 컴포넌트 만들고 여러 페이지에서 불러오면 되기 때문에
  컴포넌트 하나만 불러와서 수정하기 때문에 유지 보수가 쉬움

   2. 화면 업데이트 구현이 쉽다
 선언형 프로그래밍이기 때문에 목적만 깔끔하게 명시함 - > 코드가 간결함
   선언형 프로그래밍 : 불필요한 괒어은 생략하고 목적만 간결히 명시하는 방법
   ex. 식당에서 음식을 주문할 때랑 같음 (토마토 파스타 주세요! 난 어떻게 만드는지는 모르겟고 이거 달라)

   <-> 명령형 프로그래밍 : 목적을 이루기 위한 모든 일련의 과정을 설명하는 방법


   페이지를 컴포넌트 단위로 나누어서 개발함
   State 라는 특별한 변수를 지정해서 개발
   State 변수 값에 따라 렌더링 결과가 달라짐
   : UI 화면 구성하는 것을 말함
   화면 업데이트가 필요할 때 State값만 바꾸면 자동으로 렌더링 할 수 있어서
   훨씬 더 편하고 간결함

   3. 화면 업데이트가 빠르게 처리된다.
  브라우저 렌더링 과정 (Critical Rendering Path)
  HTML => DOM => Render Tree => Layout => Painting

JSX 알아보기!
 JSx : 자바스크립트 엑스엠엘 약자임
  Component 폴더 명명해 이 안에 스크립트 컴포넌트 정리함
  - 여기서 Header.js 가 아닌 Header.jsx 를 입력하면
  파일 모양이 리엑트 모양으로 바뀜.

  xml 문법에서는 싱글태그/ 홑대그
  개발자가 안닫아도 되는건지 어떻게 알것인가

   APi 스크립트에서 쓰려면 반드시 모듈화
   export 와 import 필요

   default  속성값으로 보내는 것을
   작업하는 모든 요소는 src 안에 포함되어 있어야 함!

React 사용시 도움되는 확장 프로그램!
   [  ES7 React/Redux/GraphQL/React-Native snippets  ] 설치
   에밋(emmet)과 snippets
   에밋 : HTML, MXL, XSL 문서 등을 편집할 때 빠른 코딩을 위해 사용하는 플러그인
   Snippet(재사용 가능한 소스코드 텍스트의 작은 부분)
   하지만 이 프로그램에 익숙해지면 스스로 코드 못 침. 익숙화되지 말 것!

   * 위 프로그램 설치 후 refc 치면 ! 치면 독타입 나오는 것 처럼 자동작성됨

곧 배우게 될 HOOK
  리엑트의 코어는 훅 임 HOOK
  훅만 잘 사용해도 리엑트의 중간은 감

  Hook : 리액트 훅은 리액트 클래스형 컴포넌트에서 이용하던 코드를 작성할 필요없이 함수형 컴포넌트에서 다양한 기능을 사용할 수 있게 만들어준 라이브러리
  출처: https://choijying21.tistory.com/entry/React-리액트-훅에-대해-알아보기React-Hooks란 [JDevelog:티스토리]

React의 기본 문법 => JSx
   > JavaScript & xml
   1. 출력부의 공간에는 반드시 숫자, 문자 형태의 자료형으로 들어와야 함
      함수형 컴포넌트의 return 출력부!! => UI화면 출력!!
      절대로 객체 형태로는 직접 절대 가져올 수 없음
   2. 산술 및 문자 표현식은 가능하다.
      더하기 빼기 나누기 등의 사칙연산
   3. 논리 표현식 가능 Boolean 값 활용
   4. 닫힘 표현식 가능 : 싱글태그 인 것처럼 표현 가능
      ex.<Header />
         <Body />
         <Footer />
   5. JSX 문법에서는 반드시 최상위가 있어야 함.
       부모의 역할을 하는 태그가 있어야 함
       프레그먼트 일리먼트(Fragment Element) : 아무런 의미가 없는 태그
       ex. <> </> 아무 태그도 없지만 그냥 역할만으로 사용 가능함!
   6. html => class를 JSX 에서는 "className" 이라고 써야함!
      리엑트는 리엑트 전용 CSS(스타일 컴포넌트)가 있음
      리엑트 전용 SCSS 도 있음
   7. React 전용 스타일 컴포넌트 => styled-component-Guid
   8. React 출력부는 "문" 사용 불가 -> "식"으로 사용
   9. React & CSS 스타일 시트 역시 외부 스타일시트 사용 가능! (내부 스타일 시트는 없음)
       외부 스타일 시트 이거나 인라인 

   React  > Props => Propertys 약어
     > Component 기반 => 각각의 컴포넌트 간에 props 전달하고 받을 수 있음
     > props는 반드시 부모에서 자식으로 일방통행!
     > 유틸리티 !!! => Redux // Saga // Thunk => 미들웨어
     > React Query 등등

Props = 기본 속성 : 객체
 => 구조분해 할당 가능
 데이터를 보낼 때 누락된 데이터가 있으면 defaultProps 라는 속성을 사용하면 됨
 Props 를 통해서 컴포넌트도 보낼 수 있음!

